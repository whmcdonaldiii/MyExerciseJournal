@using MyExerciseJournal.Models
@using MyExerciseJournal.Components.SubComponents
@using MyExerciseJournal.Persistence
@inject ExerciseRepository Repo

@if (_userSession != null)
{
    <MudText>@_userSession?.Date</MudText>
    <MudPaper Class="pa-4" Elevation="4">
        <MudStack>
            <MudText>@((SessionType)_userSession.SessionTypeId)</MudText>
        </MudStack>
        <MudGrid>
            <MudItem xs="12">
                <MudDataGrid T="Exercise" Items="@Exercises" Hover="true" Dense="true" SelectedItemChanged="@SetSelected">
                    <Columns>
                        <PropertyColumn Property="x=>x.Name" />
                        <PropertyColumn Property="x=>x.Sets" />
                        <PropertyColumn Property="x=>x.Reps" />
                        <PropertyColumn Property="x=>x.Weight" />
                        <PropertyColumn Property="x=>x.RestTime" />
                        <TemplateColumn>
                            <CellTemplate>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@EditExercise">Edit</MudIconButton>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@DeleteExercise">Delete</MudIconButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddExercise">Add Exercise</MudButton>
            </MudItem>
        </MudGrid>
        <MudDivider />

        <MudGrid>
            <MudItem xs="12">
                <MudTextField Variant="Variant.Text" Label="Notes" @bind-Value="@_userSession.Notes" OnBlur="@UpdateNotes"></MudTextField>
            </MudItem>
        </MudGrid>


        @if (selectedExercise != null)
        {
            <MudDialog @bind-Visible="isDialogOpen">
                <DialogContent>
                    <SessionExercise SelectedSessionType="@_selectedSessionType" Exercise="@selectedExercise" OnSave="HandleSave" />
                </DialogContent>
            </MudDialog>
        }
    </MudPaper>

}


@code {
    [CascadingParameter] User CurrentUser { get; set; }

    [Parameter]
    public UserSession? UserSession { get; set; }

    private List<SessionType> sessionTypes { get; set; }
    private SessionType? _selectedSessionType;
    private UserSession? _userSession { get; set; }
    private List<Exercise> Exercises = new();
    private Exercise? selectedExercise = new();
    private bool isDialogOpen;

    protected override void OnInitialized()
    {
        sessionTypes = UserSession.GetSessionTypes();
    }

    protected override async Task OnParametersSetAsync()
    {
        _userSession = UserSession;
        Exercises = _userSession.Exercises;
        _selectedSessionType = (SessionType)_userSession.SessionTypeId;
        await InvokeAsync(StateHasChanged);
    }

    private void SetSelected(Exercise exercise)
    {
        selectedExercise = exercise;
    }

    private void UpdateSelectionTypeId()
    {
        _userSession.SessionTypeId = (int)_selectedSessionType;
        UserSession.SessionTypeId = (int)_selectedSessionType;
    }

    private void AddExercise()
    {
        selectedExercise = new Exercise();
        isDialogOpen = true;
    }

    private void EditExercise()
    {
        if (selectedExercise != null)
            isDialogOpen = true;
    }

    private void DeleteExercise()
    {
        if (selectedExercise != null)
        {
            Exercises.RemoveAll(x => x.Id == selectedExercise.Id);
            CurrentUser.Sessions.First(x => x.Id == _userSession.Id).Exercises = Exercises;
            Repo.UpdateUser(CurrentUser);
        }
    }

    private void UpdateNotes()
    {
        CurrentUser.Sessions.First(x => x.Id == _userSession.Id).Notes = _userSession.Notes;
        Repo.UpdateUser(CurrentUser);
    }

    private void HandleSave(Exercise exercise)
    {
        if (!Exercises.Contains(exercise))
        {
            Exercises.Add(exercise);
            CurrentUser.Sessions.First(x => x.Id == _userSession.Id).Exercises = Exercises;
            Repo.UpdateUser(CurrentUser);
        }
        else
        {
            Exercises.First(x => x.Id == exercise.Id).Name = exercise.Name;
            Exercises.First(x => x.Id == exercise.Id).Sets = exercise.Sets;
            Exercises.First(x => x.Id == exercise.Id).Reps = exercise.Reps;
            Exercises.First(x => x.Id == exercise.Id).Weight = exercise.Weight;
            Exercises.First(x => x.Id == exercise.Id).RestTime = exercise.RestTime;
            CurrentUser.Sessions.First(x => x.Id == _userSession.Id).Exercises = Exercises;
            Repo.UpdateUser(CurrentUser);
        }

        isDialogOpen = false;
    }
}
