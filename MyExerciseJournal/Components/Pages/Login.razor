@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject ExerciseAuthenticationService AuthenticationService


<EditForm Model="@model" method="post" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 16 characters"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <MudText Typo="Typo.caption" Color="Color.Error">@errorMessage</MudText>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                    
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="7">
            <MudLink Href="/register">Register</MudLink>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    [Inject]
    public ILocalStorageService LocalStorage { get; set; }

    public LoginForm model { get; set; } = new();

    bool success;

    string errorMessage = "";

    public class LoginForm
    {
        [Required]
        [StringLength(16, ErrorMessage = "Name length can't be more than 16.")]
        public string Username { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        success = AuthenticationService.AuthenticateUser(model.Username);

        if (success)
        {
            LoginCredentials credentials = new(){IsLoggedIn = true, UserName = model.Username};
            string json = JsonSerializer.Serialize<LoginCredentials>(credentials);
            await LocalStorage.SetItemAsync<string>("isLoggedIn", json);
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            errorMessage = "* Unknown user. Please register";
            NavigationManager.NavigateTo("/login");
        }

    }
}
